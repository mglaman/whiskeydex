<?php declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_extra_field_info().
 *
 * @phpstan-return  array<string, array<string, array<string, array<string,array<string, bool|Drupal\Core\StringTranslation\TranslatableMarkup|int>>>>>
 */
function whiskeydex_entity_extra_field_info(): array {
  $extra = [];
  $extra['collection']['collection']['display']['links'] = [
    'label' => t('Manage'),
    'description' => t('Links to manage'),
    'weight' => 100,
    'visible' => TRUE,
  ];
  $extra['collection_item']['collection_item']['display']['links'] = [
    'label' => t('Manage'),
    'description' => t('Links to manage'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_theme().
 *
 * @phpstan-param array<string, mixed> $existing
 * @phpstan-return array<string, array<string, string>>
 */
function whiskeydex_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'collection' => [
      'render element' => 'elements',
    ],
    'collection_item' => [
      'render element' => 'elements',
    ],
    'distillery' => [
      'render element' => 'elements',
    ],
    'whiskey' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 */
function whiskeydex_preprocess_collection(&$variables): void {
  assert(is_array($variables['elements']));
  $variables['collection'] = $variables['elements']['#collection'];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 * @phpstan-return array<int, string>
 */
function whiskeydex_theme_suggestions_collection(array $variables) {
  return _whiskeydex_entity_theme_suggestions('collection', $variables);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 * @phpstan-return array<int, string>
 */
function whiskeydex_theme_suggestions_collection_item(array $variables) {
  return _whiskeydex_entity_theme_suggestions('collection_item', $variables);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 * @phpstan-return array<int, string>
 */
function whiskeydex_theme_suggestions_distillery(array $variables) {
  return _whiskeydex_entity_theme_suggestions('distillery', $variables);
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 * @phpstan-return array<int, string>
 */
function whiskeydex_theme_suggestions_whiskey(array $variables): array {
  return _whiskeydex_entity_theme_suggestions('whiskey', $variables);
}

/**
 * Taken from _commerce_entity_theme_suggestions.
 *
 * @phpstan-param array<string, string|array<string, mixed>|object> $variables
 * @phpstan-return array<int, string>
 */
function _whiskeydex_entity_theme_suggestions(string $entity_type_id, array $variables): array {
  $original = $variables['theme_hook_original'];
  assert(is_string($original));
  assert(is_array($variables['elements']));
  $entity = $variables['elements']['#' . $entity_type_id];
  assert($entity instanceof EntityInterface);
  $view_mode = $variables['elements']['#view_mode'];
  assert(is_string($view_mode));
  $sanitized_view_mode = str_replace('.', '_', $view_mode);

  $suggestions = [];
  $suggestions[] = $original . '__' . $sanitized_view_mode;
  $suggestions[] = $original . '__' . $entity->bundle();
  $suggestions[] = $original . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  return $suggestions;
}
